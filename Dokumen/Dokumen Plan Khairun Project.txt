Master Plan Proyek: Website "Khairun"
Versi Dokumen: 5.0 (Final Master Plan)
Tanggal: 27 Juni 2025
Disusun : Azvi (Manajer Proyek)
  



Bab 1: Visi & Latar Belakang Proyek
1.1. Visi Proyek
Menciptakan sebuah ruang digital yang intim, indah, dan eksklusif untuk merayakan dan mengabadikan perjalanan kenangan "Khairun".
1.2. Ringkasan Eksekutif
Proyek ini bertujuan membangun aplikasi web privat sebagai hadiah personal yang fungsional. Aplikasi akan dibangun menggunakan Framework Laravel dengan arsitektur full-stack terintegrasi (Backend dan Frontend dengan Laravel Blade). Proyek ini akan mengutamakan keamanan, pengalaman pengguna yang menyentuh, dan keandalan. Kolaborasi dengan tim Desain UI/UX akan menjadi pilar penting untuk memastikan hasil akhir sesuai dengan visi estetika yang diinginkan.
1.3. Pemangku Kepentingan (Stakeholders)
* Azvi: Manajer Proyek, Pemilik Proyek, Pengembang Utama, Pengguna A.
* 'Khairun': Pengguna Utama B, Penerima Manfaat Akhir Proyek.
* Rekan Desainer: Tim Desain UI/UX.
* AI (Saya): Konsultan Teknis & Rekan Kerja Pengembangan.




























Bab 2: Lingkup & Strategi Pengembangan
2.1. Lingkup Fungsional (In-Scope)
Aplikasi akan mencakup lima modul utama:
1. Manajemen Pengguna & Keamanan: Sistem login dua-faktor (Password + OTP), halaman profil, dan manajemen akun. Registrasi publik dinonaktifkan.
2. Timeline Kenangan: Fitur CRUD (Create, Read, Update, Delete) untuk kenangan yang berisi tanggal, deskripsi, gambar, dan tautan lagu Spotify.
3. Kalender Personal: Fitur CRUD untuk acara/kegiatan dengan kategori berbeda (misal, acara umum, siklus menstruasi).
4. Fitur Kejutan Ulang Tahun: Mekanisme pengiriman konten spesial (pesan, gambar, lagu) antar akun yang diatur waktunya.
5. Integrasi Spotify: Kemampuan untuk menautkan dan memutar lagu dari Spotify.
2.2. Metodologi & Alur Kerja
* Metodologi: Pengembangan akan menggunakan pendekatan Pengembangan Berbasis Fase (Phased Development) untuk memastikan progres yang terukur dan kualitas yang terjaga di setiap tahap.
* Strategi: Kita akan menerapkan strategi "Backend-First", di mana seluruh logika server dan database diselesaikan terlebih dahulu sebelum implementasi desain frontend.
* Alur Kerja Kolaborasi (dengan Desainer):
   1. Briefing Fitur: Anda memberikan arahan untuk sebuah fitur.
   2. Desain UI/UX: Tim Desain (rekan Anda) membuat mockup visual.
   3. Penyerahan (Hand-off): Tim Desain menyerahkan aset dan panduan gaya.
   4. Implementasi Kode: Tim Pengembangan (kita) menerjemahkan desain menjadi kode fungsional.
   5. Tinjauan & Iterasi: Sesi tinjauan bersama untuk memastikan kesesuaian.
2.3. Tumpukan Teknologi (Tech Stack)
* Backend: Laravel 12 / PHP 8.2+
* Database: MySQL
* Frontend: Laravel Blade, CSS3, JavaScript
* Starter Kit: Laravel Breeze (Stack Blade)
* Penyimpanan File: Cloudflare R2 (S3-Compatible)
* Layanan Eksternal: Spotify API (via Guzzle), Server Mail SMTP (untuk OTP)




Bab 3: Arsitektur Aplikasi
3.1. Rancangan Struktur Database
Diagram Relasi Entitas (ERD):
erDiagram
    users {
        BIGINT id PK
        VARCHAR name
        VARCHAR email
        VARCHAR password
        VARCHAR profile_photo_path
        VARCHAR otp_code
        DATETIME otp_expires_at
    }
    memories {
        BIGINT id PK
        BIGINT user_id FK
        DATE memory_date
        TEXT description
        VARCHAR image_path
        VARCHAR spotify_track_id
    }
    events {
        BIGINT id PK
        BIGINT user_id FK
        VARCHAR title
        DATETIME start_date
        VARCHAR spotify_track_id
    }
    birthday_surprises {
        BIGINT id PK
        BIGINT sender_user_id FK
        BIGINT receiver_user_id FK
        TEXT content_payload
        DATETIME reveal_at
    }
    users ||--o{ memories : "membuat"
    users ||--o{ events : "membuat"
    users ||--o{ birthday_surprises : "mengirim"
    users ||--o{ birthday_surprises : "menerima"
  

Detail Tabel:
* Tabel: users
   * id (PK), name, email (Unique), password (Hashed), profile_photo_path, otp_code, otp_expires_at


Kolom
	Tipe Data
	Keterangan
	id
	BIGINT (PK)
	ID unik untuk setiap pengguna.
	name
	VARCHAR(255)
	Nama lengkap pengguna.
	email
	VARCHAR(255)
	Alamat email unik, digunakan untuk login. Bersifat UNIQUE.
	password
	VARCHAR(255)
	Password pengguna, disimpan dalam bentuk hash.
	profile_photo_path
	VARCHAR(2048)
	Path atau URL foto profil (nullable, disimpan di Cloudflare R2).
	otp_code
	VARCHAR(6)
	Kode OTP 6 digit untuk verifikasi (nullable).
	otp_expires_at
	DATETIME
	Waktu kedaluwarsa kode OTP (nullable).
	created_at
	TIMESTAMP
	Tanggal pembuatan data, dikelola otomatis oleh Laravel.
	updated_at
	TIMESTAMP
	Tanggal pembaruan data terakhir, dikelola otomatis oleh Laravel.
	

* Tabel: memories
   * id (PK), user_id (FK), memory_date, description, image_path, spotify_track_id


Kolom
	Tipe Data
	Keterangan
	id
	BIGINT (PK)
	ID unik untuk setiap kenangan.
	user_id
	BIGINT (FK)
	Merujuk ke users.id sebagai pemilik kenangan.
	memory_date
	DATE
	Tanggal saat kenangan tersebut terjadi.
	description
	TEXT
	Cerita atau deskripsi dari kenangan.
	image_path
	VARCHAR(2048)
	Path atau URL gambar (nullable, disimpan di Cloudflare R2).
	created_at
	TIMESTAMP
	Tanggal pembuatan data, dikelola otomatis oleh Laravel.
	updated_at
	TIMESTAMP
	Tanggal pembaruan data terakhir, dikelola otomatis oleh Laravel.
	

* Tabel: events
   * id (PK), user_id (FK), title, start_date, end_date, type, spotify_track_id


Kolom
	Tipe Data
	Keterangan
	id
	BIGINT (PK)
	ID unik untuk setiap acara.
	user_id
	BIGINT (FK)
	Merujuk ke users.id sebagai pembuat acara.
	title
	VARCHAR(255)
	Judul atau nama acara.
	start_date
	DATETIME
	Tanggal dan waktu mulai acara.
	end_date
	DATETIME
	Tanggal dan waktu selesai acara (nullable, jika lebih dari 1 hari).
	type
	VARCHAR(50)
	Jenis acara, misalnya: 'event', 'cycle', 'birthday'.
	created_at
	TIMESTAMP
	Dikelola otomatis oleh Laravel.
	updated_at
	TIMESTAMP
	Dikelola otomatis oleh Laravel.
	

* Tabel: birthday_surprises
   * id (PK), sender_user_id (FK), receiver_user_id (FK), content_type, content_payload, reveal_at


Kolom
	Tipe Data
	Keterangan
	id
	BIGINT (PK)
	ID unik untuk setiap entri kejutan.
	sender_user_id
	BIGINT (FK)
	ID pengguna pengirim kejutan (relasi ke users.id).
	receiver_user_id
	BIGINT (FK)
	ID pengguna penerima kejutan (relasi ke users.id).
	content_type
	ENUM('message','image','video_link')
	Jenis konten kejutan.
	content_payload
	TEXT
	Isi konten berupa teks, path gambar, atau URL video.
	reveal_at
	DATETIME
	Tanggal dan waktu kapan kejutan akan ditampilkan.
	created_at
	TIMESTAMP
	Dikelola otomatis oleh Laravel.
	updated_at
	TIMESTAMP
	Dikelola otomatis oleh Laravel.
	

3.2. Rancangan Rute & Controller
* Autentikasi: (routes/auth.php by Breeze, ProfileController)
   * GET /profile, PATCH /profile, DELETE /profile. Registrasi dinonaktifkan.
   * Controller yang Bertanggung Jawab: ProfileController, dan Controller bawaan dari Laravel Breeze.
   * Catatan: Sebagian besar rute ini akan dibuat secara otomatis oleh Laravel Breeze.
Aksi Pengguna
	Metode HTTP
	URI
	Controller@Method
	Nama Rute (Route Name)
	Menampilkan halaman profil
	GET
	/profile
	ProfileController@edit
	profile.edit
	Memperbarui data profil
	PATCH
	/profile
	ProfileController@update
	profile.update
	Menghapus akun
	DELETE
	/profile
	ProfileController@destroy
	profile.destroy
	

* Timeline Kenangan: (routes/web.php, MemoryController)
   * GET /dashboard, POST /memories, PUT /memories/{id}, DELETE /memories/{id}
   * Controller yang Akan Dibuat: MemoryController
   * Catatan: Kita akan menggunakan standar Resourceful Routes dari Laravel yang sangat efisien
Aksi Pengguna
	Metode HTTP
	URI
	Controller@Method
	Nama Rute (Route Name)
	Menampilkan semua kenangan
	GET
	/dashboard
	MemoryController@index
	memories.index
	Menampilkan form tambah
	GET
	/memories/create
	MemoryController@create
	memories.create
	Menyimpan kenangan baru
	POST
	/memories
	MemoryController@store
	memories.store
	Menampilkan form edit
	GET
	/memories/{id}/edit
	MemoryController@edit
	memories.edit
	Memperbarui kenangan
	PUT/PATCH
	/memories/{id}
	MemoryController@update
	memories.update
	Menghapus kenangan
	DELETE
	/memories/{id}
	MemoryController@destroy
	memories.destroy
	* Kalender & Acara: (routes/web.php & routes/api.php, EventController)
   * GET /calendar, GET /api/events, POST /api/events, PUT /api/events/{id}, DELETE /api/events/{id}
   * Controller yang Akan Dibuat: EventController
   * Catatan: Rute yang ditandai [API] akan ditempatkan di file routes/api.php. Rute-rute ini berfungsi sebagai endpoint yang dipanggil oleh JavaScript dan akan menggunakan sistem autentikasi yang sesuai untuk API (seperti Laravel Sanctum). Hal ini memisahkan logika web dan API secara bersih
Aksi Pengguna
	Metode HTTP
	URI
	Controller@Method
	Nama Rute (Route Name)
	Menampilkan halaman kalender
	GET
	/calendar
	EventController@index
	calendar.index
	[API] Mengambil data acara
	GET
	/api/events
	EventController@getEvents
	api.events.get
	[API] Menyimpan acara baru
	POST
	/api/events
	EventController@store
	api.events.store
	[API] Memperbarui acara
	PUT/PATCH
	/api/events/{id}
	EventController@update
	api.events.update
	[API] Menghapus acara
	DELETE
	/api/events/{id}
	EventController@destroy
	api.events.destroy
	* Kejutan Ulang Tahun: (routes/web.php & routes/api.php, BirthdaySurpriseController)
   * GET /surprise/setup, POST /surprise/setup, GET /api/check-surprise
   * Controller yang Akan Dibuat: BirthdaySurpriseController
Aksi Pengguna
	Metode HTTP
	URI
	Controller@Method
	Nama Rute (Route Name)
	Menampilkan form atur kejutan
	GET
	/surprise/setup
	BirthdaySurpriseController@setup
	surprise.setup
	Menyimpan/Update data kejutan
	POST
	/surprise/setup
	BirthdaySurpriseController@store
	surprise.store
	[API] Cek & Ambil konten
	GET
	/api/check-surprise
	BirthdaySurpriseController@check
	api.surprise.check
	* Spotify: (routes/web.php & routes/api.php, SpotifyController)
   * GET /spotify/redirect, GET /spotify/callback, POST /api/spotify/play
   * Controller yang Akan Dibuat: SpotifyController
Aksi Pengguna
	Metode HTTP
	URI
	Controller@Method
	Nama Rute (Route Name)
	Mengarahkan ke Spotify
	GET
	/spotify/redirect
	SpotifyController@redirect
	spotify.redirect
	Menangkap callback Spotify
	GET
	/spotify/callback
	SpotifyController@callback
	spotify.callback
	[API] Memutar musik
	POST
	/api/spotify/play
	SpotifyController@play
	api.spotify.play
	





Bab 4: Logika Bisnis & Alur Kerja Pengguna
4.1. Alur Kerja Pengguna (User Workflow)
Login dengan OTP:
  



Tambah Kenangan:
  

4.2. Aturan Validasi & Logika Inti
* Validasi Kenangan: memory_date wajib diisi, description wajib diisi, image opsional dan harus berupa gambar dengan ukuran maks 2MB.
* Otorisasi: Akan diimplementasikan menggunakan Laravel Policies. Contoh: MemoryPolicy akan memastikan hanya pemilik kenangan yang dapat mengedit atau menghapusnya.
* Logika Kejutan Ulang Tahun: Sebuah scheduled task atau pengecekan saat login akan digunakan untuk memeriksa apakah reveal_at telah tercapai.
Modul 1: Autentikasi & Keamanan
Controller / Proses
	Method / Aksi
	Tujuan
	Alur Logika & Aturan Validasi
	LoginController (Breeze)
	store (Login Attempt)
	Memverifikasi kredensial dan memulai proses OTP.
	1. Validasi: email (wajib, format email), password (wajib).
2. Cari user berdasarkan email. Jika tidak ada, gagalkan.
3. Bandingkan hash password. Jika tidak cocok, gagalkan.
4. Jika cocok: Hentikan proses login standar.
5. Generate OTP: Buat kode 6 digit, simpan ke users.otp_code & users.otp_expires_at.
6. Kirim email berisi kode OTP ke pengguna.
7. Arahkan pengguna ke halaman verifikasi OTP.
	VerifyOtpController
	verify (Verifikasi OTP)
	Memvalidasi OTP dan menyelesaikan proses login.
	1. Validasi: otp_code (wajib, 6 digit numerik).
2. Ambil ID pengguna dari sesi.
3. Bandingkan OTP yang dimasukkan dengan users.otp_code.
4. Pastikan waktu saat ini tidak melebihi users.otp_expires_at.
5. Jika valid: Hapus data OTP dari database, selesaikan proses login (Auth::login()), lalu arahkan ke Dashboard.
6. Jika tidak valid: Arahkan kembali dengan pesan error.
	ProfileController
	update
	Memperbarui profil dan password pengguna.
	1. Otorisasi: Hanya pengguna yang login yang bisa mengakses.
2. Validasi: Validasi name dan email. Jika password diisi, validasi juga current_password dan password_confirmation.
3. Perbarui data di tabel users. Jika ada foto profil baru, unggah ke Cloudflare R2 dan perbarui profile_photo_path.
	Modul 2: Timeline Kenangan
Controller
	Method
	Tujuan
	Alur Logika & Aturan Validasi
	MemoryController
	index
	Menampilkan semua kenangan.
	1. Ambil ID pengguna yang sedang login.
2. Query ke tabel memories di mana user_id cocok.
3. Urutkan hasil berdasarkan memory_date (terbaru dulu).
4. Kirim data ke view memories.index.
	MemoryController
	store
	Menyimpan kenangan baru.
	1. Validasi: `'memory_date' => 'required
	MemoryController
	update
	Memperbarui kenangan yang ada.
	1. Cari memory berdasarkan ID.
2. Otorisasi (via Policy): Pastikan pengguna adalah pemilik kenangan.
3. Lakukan validasi seperti pada store.
4. Jika ada gambar baru, hapus gambar lama di R2, lalu unggah yang baru.
5. Perbarui data di database.
	MemoryController
	destroy
	Menghapus kenangan.
	1. Cari memory berdasarkan ID.
2. Otorisasi (via Policy): Pastikan pengguna adalah pemilik.
3. Hapus file gambar terkait di Cloudflare R2.
4. Hapus baris data dari tabel memories.
5. Arahkan kembali dengan pesan sukses.
	Modul 3 & 4: Kalender & Kejutan Ulang Tahun
Controller
	Method
	Tujuan
	Alur Logika & Aturan Validasi
	EventController
	getEvents (API)
	Menyediakan data untuk kalender JS.
	1. Terima rentang tanggal dari request.
2. Query ke tabel events berdasarkan user_id dan rentang tanggal.
3. Kembalikan hasil dalam format JSON.
	EventController
	store (API)
	Menyimpan acara baru.
	1. Validasi: 'title' => 'required', `'start_date' => 'required
	BirthdaySurpriseController
	setup
	Menampilkan halaman untuk mengatur kejutan.
	1. Otorisasi: Hanya user_id pengirim yang diizinkan.
2. Ambil data kejutan yang sudah ada (jika ada) dari database.
3. Tampilkan view formulir surprise.setup dengan data tersebut.
	BirthdaySurpriseController
	store
	Menyimpan atau memperbarui data kejutan.
	1. Otorisasi: Sama seperti setup.
2. Validasi: 'content_type' => 'required', 'content_payload' => 'required', `'reveal_at' => 'required
	









































Bab 5: Rencana Eksekusi & Jadwal
5.1. Rencana Pengerjaan Berbasis Fase
Fase
	Nama Fase
	Estimasi Durasi
	Deliverable Utama
	1
	Inisiasi & Fondasi
	3 - 5 Hari
	Aplikasi dasar dengan sistem login & registrasi (tertutup) yang berfungsi.
	2
	Pengembangan MVP
	5 - 7 Hari
	Fungsionalitas CRUD untuk Timeline Kenangan (berbasis teks).
	3
	Peningkatan Fitur
	7 - 10 Hari
	Timeline menampilkan gambar (Cloudflare R2) & Modul Kalender berfungsi.
	4
	Implementasi Lanjutan
	5 - 8 Hari
	Fitur Kejutan Ulang Tahun, Keamanan OTP, dan Integrasi Spotify berfungsi.
	5
	Finalisasi & Peluncuran
	4 - 6 Hari
	Aplikasi teruji (UAT), bug diperbaiki, dan berhasil di-deploy ke server publik.
	5.2. Daftar Tugas Detail untuk Fase Awal (Fase 1)
1. Setup Proyek: composer create-project laravel/laravel Khairun
2. Kontrol Versi: git init & initial commit.
3. Konfigurasi Database: Mengedit .env untuk koneksi ke MySQL.
4. Install Breeze: composer require laravel/breeze --dev
5. Setup Breeze & Frontend: php artisan breeze:install (Pilih Blade), lalu npm install & npm run dev.
6. Migrasi Awal: php artisan migrate.
7. Nonaktifkan Registrasi: Memberi komentar pada rute /register di routes/auth.php.
8. Pembuatan Akun Awal: Membuat UserSeeder.php dan menjalankan php artisan db:seed.
Bab 6: Kualitas, Risiko, & Peluncuran
6.1. Kebutuhan Non-Fungsional
* Keamanan: Proteksi CSRF, XSS, dan eager loading untuk mencegah N+1 problem akan diimplementasikan.
* Kinerja: Optimasi gambar dan potensi caching akan diterapkan.
* Pemeliharaan: Mengikuti standar kode PSR-12 dan penggunaan Git secara disiplin.
6.2. Analisis Risiko & Mitigasi
Risiko
	Dampak
	Rencana Mitigasi
	Keterlambatan Desain UI/UX
	Tinggi
	Komunikasi proaktif dengan desainer, dan memulai pengembangan dengan struktur Blade standar sambil menunggu desain final.
	Kompleksitas Integrasi API
	Sedang
	Mengalokasikan waktu riset yang cukup pada Fase 4. Melakukan implementasi pada branch terpisah.
	Masalah Deployment
	Sedang
	Memilih penyedia hosting dengan dokumentasi Laravel yang baik. Melakukan deployment percobaan sebelum peluncuran final.
	6.3. Strategi Deployment
1. Pengujian (UAT): Pengujian menyeluruh oleh Anda dan 'Khairun'.
2. Pemilihan Hosting: Memilih penyedia yang mendukung Laravel (PHP, MySQL, SSH).
3. Proses Deployment: Tarik kode dari Git, jalankan composer install, konfigurasikan .env produksi, jalankan artisan migrate dan artisan optimize.
4. Go-Live: Arahkan nama domain dan pastikan HTTPS (SSL) aktif.




Bab 7: Penutup & Persetujuan
Dokumen ini merupakan hasil dari seluruh sesi perencanaan kita dan akan menjadi satu-satunya acuan dalam fase pengembangan. Tim Pengembangan menunggu persetujuan akhir dari Manajer Proyek untuk memulai Fase 1: Inisiasi & Fondasi Aplikasi.